name: MicroDetect CI

on:
  push:
    branches: [ main ]
    paths-ignore:
      - "microdetect/__init__.py"
      - "setup.py"
  pull_request:
    branches: [ main ]

jobs:
  check_skip:
    runs-on: ubuntu-latest
    outputs:
      should_skip: ${{ steps.check_commit.outputs.should_skip }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version bump commit
        id: check_commit
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if [[ "$COMMIT_MSG" == *"chore: bump version"* ]]; then
            echo "Skipping CI for version bump commit"
            echo "should_skip=true" >> $GITHUB_OUTPUT
          else
            echo "should_skip=false" >> $GITHUB_OUTPUT
          fi
  get_commit_messages:
    needs: check_skip
    if: ${{ needs.check_skip.outputs.should_skip != 'true' }}
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN }}
    outputs:
      commit_messages: ${{ steps.format_messages.outputs.messages }}
    steps:
      - name: Install GitHub CLI
        run: sudo apt-get install gh -y

      - name: Check out repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Get commit information
        id: commit_info
        run: |
          # Determine if this is a PR or push to main
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            echo "Processing Pull Request #${{ github.event.pull_request.number }}"
            
            # Get all commits in the PR
            echo "üì¶ PR #${{ github.event.pull_request.number }}: ${{ github.event.pull_request.title }}" > commit_messages.txt
            echo "" >> commit_messages.txt
            
            echo "üîÑ Commits in this PR:" >> commit_messages.txt
            
            # Use GitHub CLI to get commits in the PR
            gh pr view ${{ github.event.pull_request.number }} --json commits --jq '.commits[] | "‚Ä¢ " + .messageHeadline + if .messageBody then "\n  " + (.messageBody | gsub("\n"; "\n  ")) else "" end' >> commit_messages.txt
          else
            echo "Processing push to main branch"
            
            # Find the latest tag or merge commit
            latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
            
            if [ ! -z "$latest_tag" ]; then
              echo "üì¶ Commits since tag $latest_tag:" > commit_messages.txt
              git_range="$latest_tag..HEAD"
            else
              # Find latest merge commit
              latest_merge=$(git log --merges -n 1 --pretty=format:"%H" 2>/dev/null || echo "")
              
              if [ ! -z "$latest_merge" ]; then
                echo "üì¶ Commits since last merge:" > commit_messages.txt
                git_range="$latest_merge..HEAD"
              else
                # If no tags or merges, get last 10 commits
                echo "üì¶ Recent commits:" > commit_messages.txt
                git_range="HEAD~10..HEAD"
              fi
            fi
            
            echo "" >> commit_messages.txt
            git log $git_range --pretty=format:"‚Ä¢ %s%n  %b" | sed 's/^  $//' >> commit_messages.txt
          fi
          
          cat commit_messages.txt

      - name: Format messages for output
        id: format_messages
        run: |
          # Escape newlines and other special characters for GitHub Actions output
          formatted_message=$(cat commit_messages.txt | jq -sR .)
          echo "messages=$formatted_message" >> $GITHUB_OUTPUT

      - name: Upload commit messages
        uses: actions/upload-artifact@v4
        with:
          name: commit-messages
          path: commit_messages.txt

  build:
    name: Package Build
    needs: get_commit_messages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build wheel twine

      - name: Build package
        run: |
          python -m build

      - name: Check package with twine
        run: |
          python -m twine check dist/*

      - name: Test installation
        run: |
          pip install dist/*.whl
          python -c "import microdetect; print(f'MicroDetect version: {microdetect.__version__}')"


  notify:
    name: Send Notification
    needs: [get_commit_messages, build]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Set job status
        id: status
        run: |
          if [[ "${{ needs.build.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

      - name: Process commit messages
        id: process_messages
        run: |
          # Decode the JSON-encoded message from outputs
          echo '${{ needs.get_commit_messages.outputs.commit_messages }}' | jq -r > processed_message.txt

          # Escape Markdown special characters one by one
          cat processed_message.txt | \
          sed 's/\*/\\*/g' | \
          sed 's/_/\\_/g' | \
          sed 's/\[/\\[/g' | \
          sed 's/\]/\\]/g' | \
          sed 's/~/\\~/g' | \
          sed 's/`/\\`/g' | \
          sed 's/>/\\>/g' | \
          sed 's/#/\\#/g' | \
          sed 's/+/\\+/g' | \
          sed 's/=/\\=/g' | \
          sed 's/|/\\|/g' | \
          sed 's/{/\\{/g' | \
          sed 's/}/\\}/g' | \
          sed 's/!/\\!/g' > escaped_message.txt

          # Read and format for GitHub Actions output
          delimiter="EOF_MESSAGE"
          echo "processed<<$delimiter" >> $GITHUB_OUTPUT
          cat escaped_message.txt >> $GITHUB_OUTPUT
          echo "$delimiter" >> $GITHUB_OUTPUT

      - name: Set branch name
        id: branch_name
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For PR, use the source branch name
            echo "branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_OUTPUT
          else
            # For direct push, use regular branch name
            echo "branch=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Send Success Message via Telegram
        if: steps.status.outputs.status == 'success'
        uses: akeylimepie/telegram-action@main
        with:
            token: ${{ secrets.BOTTOKEN }}
            chat_id: ${{ secrets.CHAT_ID }}
            message_thread_id: ${{ secrets.THREAD_ID }}
            parse_mode: 'markdown'
            text: |
              ‚úÖ *CI Passed Successfully!*
              
              *Build Details:*
              ‚Ä¢ Repository: ${{ github.repository }}
              ‚Ä¢ Branch: ${{ steps.branch_name.outputs.branch }}
              ‚Ä¢ Triggered by: ${{ github.actor }}
              
              ${{ steps.process_messages.outputs.processed }}
              
              üîç [View Details](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})

      - name: Send Error Message via Telegram
        if: steps.status.outputs.status == 'failure'
        uses: akeylimepie/telegram-action@main
        with:
          token: ${{ secrets.BOTTOKEN }}
          chat_id: ${{ secrets.CHAT_ID }}
          message_thread_id: ${{ secrets.THREAD_ID }}
          parse_mode: 'markdown'
          text: |
            ‚ùå *CI Failed!*
            
            *Error Details:*
            ‚Ä¢ Repository: ${{ github.repository }}
            ‚Ä¢ Branch: ${{ steps.branch_name.outputs.branch }}
            ‚Ä¢ Triggered by: ${{ github.actor }}
            
            *Job Status:*
            ‚Ä¢ Build: ${{ needs.build.result }}
            
            ‚ö†Ô∏è [View Error Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})